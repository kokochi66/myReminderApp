
#user  nobody;
worker_processes  1;

error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    lua_package_path "C:/openresty-1.21.4.1-win64/lualib/?.lua;;$prefix/conf/?.lua;";
    lua_package_cpath "C:/openresty-1.21.4.1-win64/lualib/?.dll;;";

    include       mime.types;
    # default_type  application/octet-stream;
    default_type  application/json;
    sendfile        on;

    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        # access_log  logs/host.access.log  main;

        location  /hello {    
          content_by_lua_block {
            ngx.header.content_type = "text/plain"
            ngx.say("Hello, hong! reload")
          }
        }

        location /api {
            content_by_lua_block {
            local cjson = require "cjson"
            local response = { message = "Hello, OpenResty!" }
            ngx.header["Content-Type"] = "application/json"
            ngx.say(cjson.encode(response))
            }
        }

        location /add {
            content_by_lua_block {
            local cjson = require "cjson"
            local args = ngx.req.get_uri_args()
            local a = tonumber(args.a)
            local b = tonumber(args.b)
            if a and b then
                local res = {result = a+b}
                local result, err = pcall(cjson.encode,res)
                if result then
                    ngx.header["Content-Type"] = "application/json"
                    ngx.say(cjson.encode(res))
                end
            else
                ngx.say("Invalid parameters.")
            end
            }
        }

        location /module {
            default_type text/plain;
            content_by_lua_file conf/api/api.lua;
        }
        
        

        location /user {
            content_by_lua_block {
                local cjson = require "cjson"
                local name = ngx.var.arg_name
                local age = ngx.var.arg_age
                local response = { name = name, age = age }
                ngx.header["Content-Type"] = "application/json"
                ngx.say(cjson.encode(response))
            }
        }

        location /get_userdata{
            default_type application/json;
            content_by_lua_file conf/api/api.lua;
        }

        location = /register.html {
            root html;
        }

        location = /make_goal.html {
            root html;
        }


        location /register {
            default_type application/json;
            content_by_lua_file conf/api/register.lua;
        }

        location /create-goal {
            default_type application/json;
            content_by_lua_file conf/api/create_goal.lua;
        }
        location /daily_logic {
            default_type application/json;
            content_by_lua_file conf/api/daily_logic.lua;
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        # error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }

}
